#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1           0 146 0 28 3 18 #"#lang br/quicklang"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; A program to convert a racket S-expression into a stacker program"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; === Problem 1: From Variadic to Dyadic === ;"
0 0 24 29 1 #"\n"
0 9         241 28           0 0           0 39 0 17 3 83
(
 #"; in Racket (and stackerizer), + and * are variadic (takes any numbe"
 #"r of arguments)"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#"; but in stacker, these functions are dyadic (takes two arguments)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; we need to transform this expression into"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 4 #"))))"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         607 28           0 0           0 100 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 2 #" ("
0 0 14 3 14 #"stackerizer-mb"
0 0 24 3 1 #" "
0 0 14 3 4 #"EXPR"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 14 #"#%module-begin"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 4 #"EXPR"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rename-out"
0 0 24 3 2 #" ["
0 0 14 3 14 #"stackerizer-mb"
0 0 24 3 1 #" "
0 0 14 3 14 #"#%module-begin"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 107
(
 #"; define macro-cases let us specify a serie of patterns to match ins"
 #"tead of just one like with define-macro"
) 0 0 24 29 1 #"\n"
0 0 17 3 63
#"; we also name our macro +, shadowing the usual definition of +"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-macro-cases"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 69
(
 #"; this pattern will match with a single-argument addition like (+ 42"
 #")"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 27 #"; the + is a litteral match"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 64
#"; this pattern will match a variadic addition like (+ 1 2 3 4 5)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 88
(
 #"; the first argument is bound to FIRST, and the remainng arguments a"
 #"re bound to NEXT ..."
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 57 #"; NEXT is the first element of that list, ... is the rest"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 66
#"; the second argument to the function recursively call our macro +"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 92
(
 #"; we put a placeholder '+, it will create a symbol that will show th"
 #"e conversion in the REPL"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 4 #"))])"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; === Problem 2: Flatening nested expressions === ;"
0 0 24 29 1 #"\n"
0 0 17 3 112
(
 #"; we need to handle nested expressions like (+ 1 (+ 2 (+ 3 (+ 4 5)))"
 #") to flatten them to use them in out stacker"
) 0 0 24 29 1 #"\n"
0 9         769 28           0 0           0 127 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 2 #" ("
0 0 14 3 14 #"stackerizer-mb"
0 0 24 3 1 #" "
0 0 14 3 4 #"EXPR"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 14 #"#%module-begin"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 100
(
 #"; we flatten and reverse the expressions to go from (+ 1 (+ 2 (+ 3 ("
 #"+ 4 5)))) to (5 4 + 3 + 2 + 1 +)"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"for-each"
0 0 24 3 1 #" "
0 0 14 3 9 #"displayln"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 1 #" "
0 0 14 3 4 #"EXPR"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rename-out"
0 0 24 3 2 #" ["
0 0 14 3 14 #"stackerizer-mb"
0 0 24 3 1 #" "
0 0 14 3 14 #"#%module-begin"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-macro-cases"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-macro-cases"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  [("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 4 #"))])"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; === Macros making macros === ;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 2 #" ("
0 0 14 3 14 #"stackerizer-mb"
0 0 24 3 1 #" "
0 0 14 3 4 #"EXPR"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 14 #"#%module-begin"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 8 #"for-each"
0 0 24 3 1 #" "
0 0 14 3 9 #"displayln"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 1 #" "
0 0 14 3 4 #"EXPR"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rename-out"
0 0 24 3 2 #" ["
0 0 14 3 14 #"stackerizer-mb"
0 0 24 3 1 #" "
0 0 14 3 14 #"#%module-begin"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #"; to define the * too, instead of copying the code for +, we make a "
 #"macro to define operators"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 2 #" ("
0 0 15 3 9 #"define-op"
0 0 24 3 1 #" "
0 0 14 3 2 #"OP"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-macro-cases"
0 0 24 3 1 #" "
0 0 14 3 2 #"OP"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 2 #" ("
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #" ("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 2 #" ("
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 9 #"define-op"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 9 #"define-op"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         973 28           0 0           0 161 0 17 3 29
#";;; steps to define the macro"
0 0 24 29 1 #"\n"
0 0 17 3 102
(
 #"; we wrap the + macro into a define-macro applying the #' prefix to "
 #"turn the code into a syntax object"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 2 #" ("
0 0 15 3 9 #"define-op"
0 0 24 3 1 #" "
0 0 14 3 2 #"OP"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-macro-cases"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 150
(
 #"; we replace the occurences of + with the pattern variable OP to mak"
 #"e it more generic (and use quote to also convert the pattern variabl"
 #"e into a datum"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 2 #" ("
0 0 15 3 9 #"define-op"
0 0 24 3 1 #" "
0 0 14 3 2 #"OP"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-macro-cases"
0 0 24 3 1 #" "
0 0 14 3 2 #"OP"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 140
(
 #"; we escape the ellipsis operator we the form (... ...) so it is use"
 #"d in the pattern of the result macros, not in the define-op macro it"
 #"self"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 2 #" ("
0 0 15 3 9 #"define-op"
0 0 24 3 1 #" "
0 0 14 3 2 #"OP"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 18 #"define-macro-cases"
0 0 24 3 1 #" "
0 0 14 3 2 #"OP"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 2 #" ("
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 3 #")) "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 2 #" ("
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9        1177 28           0 0           0 195 0 17 3 27
#";;; explaining the ellipsis"
0 0 24 29 1 #"\n"
0 0 17 3 126
(
 #"; the pattern variable before the ellipsis defines how to handle the"
 #" ellipsis, it becomes a prototype for the rest of the list"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #";  a simple use"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lister"
0 0 24 3 1 #" "
0 0 14 3 3 #"ARG"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"ARG"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 6 #"lister"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"bar\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"baz\""
0 0 24 3 2 #") "
0 0 17 3 22 #"; '(\"foo\" \"bar\" \"baz\")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; here the prototype is '(ARG 42)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 2 #" ("
0 0 14 3 4 #"wrap"
0 0 24 3 1 #" "
0 0 14 3 3 #"ARG"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"ARG"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"wrap"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"bar\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"baz\""
0 0 24 3 2 #") "
0 0 17 3 37 #"; '((\"foo\" 42) (\"bar\" 42) (\"baz\" 42))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 2 #" ("
0 0 14 3 5 #"wrap2"
0 0 24 3 1 #" "
0 0 14 3 3 #"ARG"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"ARG"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 1 #" "
0 0 14 3 3 #"ARG"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"wrap2"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"foo\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"bar\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"baz\""
0 0 24 3 2 #") "
0 0 17 3 55
#"; '((\"foo\" 42 \"foo\") (\"bar\" 42 \"bar\") (\"baz\" 42 \"baz\"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 58
#"; example of use of ellipsises, define-op becomes variadic"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 12 #"define-macro"
0 0 24 3 2 #" ("
0 0 15 3 10 #"define-ops"
0 0 24 3 1 #" "
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #") "
0 0 17 3 25 #"; args stored in `OP ...`"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 107
(
 #"; a syntax template can only contain one top-level expression, begin"
 #" is a way of grouping multiple into one"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 18 #"define-macro-cases"
0 0 24 3 1 #" "
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 17 3 21 #"; `OP` from  `OP ...`"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 2 #") "
0 0 21 3 2 #"#'"
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 2 #" ("
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 21 3 2 #"#'"
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"OP"
0 0 24 3 1 #" "
0 0 14 3 5 #"FIRST"
0 0 24 3 1 #" "
0 0 14 3 4 #"NEXT"
0 0 24 3 2 #" ("
0 0 14 3 3 #"..."
0 0 24 3 1 #" "
0 0 14 3 3 #"..."
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 73
(
 #"; the ellipsis applies the same macro template to each member of the"
 #" list"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 3 #"..."
0 0 24 3 3 #")) "
0 0 17 3 22 #"; `...` from  `OP ...`"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 10 #"define-ops"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #")"
0           0 0           0
